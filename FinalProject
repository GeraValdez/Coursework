### Burrows Wheeler Transition ###
  
def BWT(string):
    string = " " + string #Append $ at the beginning of the string
    n = len(string)
    output = ""
    output2 = []
    D = [[] for i in range(n)] #Generate a nested list 1 x n
    D[0] = string
    for i in range(n-1): #cyclic shifts following the BWT algorithm
        D[i+1] = D[i][-1] + D[i][:-1] #We are moving the first element to the last position
    D.sort()
    for i in range(n):
        output += (D[i][n-1])  #Take out the last column
    for i in range(n):
        output2.append(D[i].index(" ")) 
    return output, output2 #double output the last column BW Transform AND index for '$' in BWT**
  
def _mers(BWT_output): #Simple two-mers, requires just the output of the BWT
    list1 = BWT_output
    list2 = sorted(BWT_output) #list2 will always be the first column of the Burrows Wheeler Transform
    x = [''.join(str(a)+b) for a,b in zip(list1,list2)] #We will merge the mers and sort again to produce
    x = sorted(x)
    return x, BWT_output
  
def _multimers(output, BWT_output): #Multimerse requires the output of the previous 
    ListA = output                  #_mers or _multimers AND the output of the BWT
    ListB = BWT_output
    x = [''.join(str(a)+b) for a,b in zip(ListB,sorted(ListA))] #merges characters of same index together
    x = sorted(x) #For example. If list1 = [1,2] and list2 = ["one", "two"], then we return ['1one','2two']
    return x, BWT_output

def mers(BWT_output): #Essentially combines _mers and _multimerse so we can work with just one input
    if len(BWT_output[0]) == 1:           #We do this because it helps to make it recursive friendly
        x = _mers(BWT_output)[0]
        L = _mers(BWT_output)[1]
    else:             
        x = _multimers(BWT_output[0], BWT_output[1])[0]
        L = _multimers(BWT_output[0], BWT_output[1])[1]
    return x, L
  
def reverse_BWT(BWT_output): #Calls mers just the right amount of times to rebuild the BWT matrix
    var = mers(BWT_output[0])
    for i in range(len(BWT_output[0])-2): #We call mers once before, and we added a character space, hence -2
        var = mers(var)
    var = var[0]
    return var[0][1:]
  
# **Originally I was using '$', but it just so happens that space is lexicographically sorted before
# the dollar sign, and that messes up with returning the right array back. Hence I changed it to a space
# After a number of successful tests I realised that this was my best option

### Testing the Burrows Wheeler Transform ###

string = "Gerardo Javier Valdez Lozano"

print (string) #Original String
print (BWT(string)[0]) #Burrows Wheeler Transform
print (reverse_BWT(BWT(string))) #Burrows Wheeler Transform and Reverse Transform == original string

# "Gerardo Javier Valdez Lozano"
# "oozr    VzrJlriGdvaandLeeaaeo"
# "Gerardo Javier Valdez Lozano"

###############################################

### Run Length Endoding ###
from re import sub

def encode(string): #Run length encoding implementation, e.g., encode('WWWXXWWWW') = 'W3X2W4'
    return sub(r'(.)\1*', lambda m: str(len(m.group(0))) + m.group(1), string)

def decode(string): #Run length decoding implementation, e.g., decode('W3X2W4') = 'WWWXXWWWW'
    return sub(r'(\d+)(\D)', lambda m: m.group(2) * int(m.group(1)), string)

### Test Run Length Encoding ###

DNA = "AAAACCCGTTTGGG"
print (encode(DNA))
print (decode(encode(DNA)))
print (decode(encode(DNA)) == DNA)

# "4A3C1G3T3G"
# "AAAACCCGTTTGGG"
# True

###############################################

### Huffman Coding Simple Compression ###

def compression(string):         #The compression algorithm is simple:
  compress_output = ""           #For each letter A, C, G, T change it to binary
  for i in range(len(string)):   #'00' stands for A, '01' stands for C, and so on
    if string[i] == 'A':
      compress_output += '00'
    elif string[i] == 'C':
      compress_output += '01'
    elif string[i] == 'G':
      compress_output += '10'
    elif string[i] == 'T':
      compress_output += '11'   
    elif string[i] == ' ':      #If we receive an input different from
      compress_output += ' '    #A,C,G,T return error
    else:                       
      return "Error: A DNA sequence can only have the nucleotides A, C, G, and T"
  return compress_output
  
def decompression(compress_output): #The decompression algorithm is simple:
  string = ""                       #For each two bits, change them to A,C,G,T
  for i in range(len(compress_output)//2):
    j = 0
    if compress_output[(2*i-j):(2*i-j+2)] == '00':
      string += 'A'
    elif compress_output[(2*i-j):(2*i-j+2)] == '01':
      string += 'C'
    elif compress_output[(2*i-j):(2*i-j+2)] == '10':
      string += 'G'
    elif compress_output[(2*i-j):(2*i-j+2)] == '11':
      string += 'T'
    elif compress_output[(2*i)] == ' ':
      string += ' '
      j += 1
    else:                       #If we receive something non-binary return error
      return "Error: The input should be binary"
  return string
  
### Testing the Huffman CompressionÂ ###

string = "ACCGTATTGGGCCAGTCT"
string2 = "ACCGTATTGGGCCAGTCTB"

print (compression(string)) #Original string
print (compression(string2)) #Original string + 'B' to test run the error
print (decompression(compression(string))) #Compression + Decompression == original string
print (decompression(compression(string))==string) #Testing if output == original string; True

# "000101101100111110101001010010110111"
# "Error: A DNA sequence can only have the nucleotides A, C, G, and T"
# "ACCGTATTGGGCCAGTCT"
# True

###############################################

### String Compression ###

def str_compression(string):          #This is painfully similar and repetitive
  compress_output = ""                #compared to Huffman coding, except we
  for i in range(len(string)//2):     #try to optimize for strings of 2 letters
    if string[2*i:2*i+2] == 'AA':     #We could do the same for strings longer
      compress_output += '0000'       #than two, but it is similar except with
    elif string[2*i:2*i+2] == 'AC':   #four times as many combinations
      compress_output += '0001'       #and the code would likely be four times
    elif string[2*i:2*i+2] == 'AG':   #longer.
      compress_output += '0010'
    elif string[2*i:2*i+2] == 'AT':
      compress_output += '0011'
    elif string[2*i:2*i+2] == 'CA':
      compress_output += '0100'
    elif string[2*i:2*i+2] == 'CC':
      compress_output += '0101'
    elif string[2*i:2*i+2] == 'CG':
      compress_output += '0110'
    elif string[2*i:2*i+2] == 'CT':
      compress_output += '0111'
    elif string[2*i:2*i+2] == 'GA':
      compress_output += '1000'
    elif string[2*i:2*i+2] == 'GC':
      compress_output += '1001'
    elif string[2*i:2*i+2] == 'GG':
      compress_output += '1010'
    elif string[2*i:2*i+2] == 'GT':
      compress_output += '1011'
    elif string[2*i:2*i+2] == 'TA':
      compress_output += '1100'
    elif string[2*i:2*i+2] == 'TC':
      compress_output += '1101'
    elif string[2*i:2*i+2] == 'TG':
      compress_output += '1110'
    elif string[2*i:2*i+2] == 'TT':
      compress_output += '1111'
    else:
      return "Error: A DNA sequence can only have the nucleotides A, C, G, and T"
  return compress_output

def str_decompression(compress_output):    #Same as above, but for decompression
  string = ""                              #Painfully similar, unnecessarily large
  for i in range(len(compress_output)//4): #and complicated. Same results
    if compress_output[(4*i):(4*i+4)] == '0000':
      string += 'AA'
    elif compress_output[(4*i):(4*i+4)] == '0001':
      string += 'AC'
    elif compress_output[(4*i):(4*i+4)] == '0010':
      string += 'AG'
    elif compress_output[(4*i):(4*i+4)] == '0011':
      string += 'AT'
    elif compress_output[(4*i):(4*i+4)] == '0100':
      string += 'CA'
    elif compress_output[(4*i):(4*i+4)] == '0101':
      string += 'CC'
    elif compress_output[(4*i):(4*i+4)] == '0110':
      string += 'CG'
    elif compress_output[(4*i):(4*i+4)] == '0111':
      string += 'CT'
    elif compress_output[(4*i):(4*i+4)] == '1000':
      string += 'GA'
    elif compress_output[(4*i):(4*i+4)] == '1001':
      string += 'GC'
    elif compress_output[(4*i):(4*i+4)] == '1010':
      string += 'GG'
    elif compress_output[(4*i):(4*i+4)] == '1011':
      string += 'GT'
    elif compress_output[(4*i):(4*i+4)] == '1100':
      string += 'TA'
    elif compress_output[(4*i):(4*i+4)] == '1101':
      string += 'TC'
    elif compress_output[(4*i):(4*i+4)] == '1110':
      string += 'TG'
    elif compress_output[(4*i):(4*i+4)] == '1111':
      string += 'TT'
    else:
      return "Error: The input should be binary"
  return string
  
### Testing the string compression ###

string = "ACCGTATTGGGCCAGTCTTG"
string2 = "ACCGTATTGGGCCAGTCTTB"

print (str_compression(string)) #Original string
print (str_compression(string2)) #Original string + 'B' to test run the error
print (str_decompression(str_compression(string))) #Compression + Decompression == original string
print (str_decompression(str_compression(string))==string) #Testing if output == original string; True

# "0001011011001111101010010100101101111110"
# "Error: A DNA sequence can only have the nucleotides A, C, G, and T"
# "ACCGTATTGGGCCAGTCTTG"
# True

###############################################

### DNA sequence ###

DNA = "TCTTGAAATCCATTTTTAGCCCAACCAGATCATCCCGCGCGAAGTGCTCGAACGAGGCTTCGCACCCGTCCGGATTGGTCATCCGGTCCGGGATGGGGAACAAGATCATCAATGTTTGTCCATGGAGGAAAACATGGCGTTTCGACCGCTTCATGATCGTATTCTCGTCCGCCGCGTCGAGTCCGAAGAGAAGACCAAAGGCGGCATCATCATCCCCGACACTGCCAAGGAGAAGCCCCAGGAAGGCGAAGTCCTCGCTGTAGGTCCCGGCGCGCGCGGCGAACAGGGTCAGATCCAGCCCTCGACGTCAAGGTGGGCGACCGCATCCTGTTCGGCAAGTGGTCCGGCACCGAGATCAAGATCGACGGAGAAGATCTCCTGATCATGAAGGAAAGCGATGTCATGGGAATCATCGAGGCCCGGGCGCCGAGAAGATAGCCGCCTGATAACGCGAAGATACAGTCAACAAGCTGCCTATC"

def count_pairs(string): #This function attempts to count the number of pairs in a string
    pairs_count = 0
    unique_characters = set(string) #We make a list of all the different characters and we use
    for character in unique_characters: #this list to go one by one checking if pairs exist
        pairs_count += string.count(character + character) #and count how many exist
    return pairs_count #We return the total number of pairs in a string
    
### Analyzing the DNA sequence ###

print ("The DNA sequence requires", len(DNA), "bytes") #479 bytes
print ("The original DNA sequence contains", count_pairs(DNA), "pairs") #101 pairs

#Let us transform the DNA sequence using Burrows Wheeler Transform
BWT_DNA = (BWT(DNA))
#print (BWT_DNA[0])
print ("After performing the Burrows Wheeler Transform, we count", count_pairs(BWT_DNA[0]), "pairs")

if count_pairs(BWT_DNA[0]) < count_pairs(DNA): #92 pairs, apparently our result just became less compressible
  print ("We conclude that the BWT failed to make our data more compressible")
else:
  print ("We conclude that the BWT helped our data become more compressible")

# Running Length Algorithm in Action:

print ("The DNA sequence compressed using the running length algorithm requires", len(encode(DNA)), "bytes of memory") #712 bytes
print ("The DNA sequence compressed using both the BWT and the running length algorithm requires", len(encode(BWT_DNA[0])), "bytes of memory") #726 bytes
print (decode(encode(BWT_DNA[0])) == BWT_DNA[0])
#We would normally expect the transform to be more compressible, and compression algorithms
#to reduce the memory needed to store something. This time both  of them backfired.

# Huffman Coding:

print ("The DNA sequence compressed using Huffman coding requires", len(compression(DNA)), "bits of memory") #958 bits
print ("The DNA sequence compressed using both BWT and Huffman coding requires", len(compression(BWT_DNA[0])), "bits of memory") #958 bits
print (decompression(compression(DNA))==DNA)

# String Encoding:

print ("The DNA sequence compressed using Huffman coding requires", len(str_compression(DNA)), "bits of memory")  #958 bits
print ("The DNA sequence compressed using both BWT and Huffman coding requires", len(str_compression(BWT_DNA[0])), "bits of memory") #958 bits
print (str_decompression(str_compression(BWT_DNA[0])))
